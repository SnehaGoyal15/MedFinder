#include <bits/stdc++.h>
using namespace std;

struct CheapMedicine
{
    string name, salt, price, unit_size;
};

string toLower(const string &str)
{
    string result = str;
    transform(result.begin(), result.end(), result.begin(), ::tolower);
    return result;
}

vector<string> split(string &str, char delimiter)
{
    vector<string> tokens;
    stringstream ss(str);
    string item;
    while (getline(ss, item, delimiter))
    {
        tokens.push_back(item);
    }
    return tokens;
}

int main()
{
    ifstream file("cleaned_expensive_after_HASHING.csv");
    if (!file.is_open())
    {
        cerr << "Could not open CSV file.\n";
        return 1;
    }

    string line, header;
    getline(file, header);
    vector<vector<string>> data;

    while (getline(file, line))
    {
        vector<string> row;
        string temp;

        for (char ch : line)
        {
            if (ch == ',')
            {
                row.push_back(temp);
                temp = "";
            }
            else
            {
                temp += ch;
            }
        }
        row.push_back(temp);
        if (row.size() >= 11)
        {
            data.push_back(row);
        }
    }

    while (true)
    {
        cout << "\nEnter medicine name (partial allowed, 'exit' to quit): ";
        string input;
        getline(cin, input);

        if (toLower(input) == "exit")
        {
            break;
        }

        string input_lower = toLower(input);
        bool found = false;

        for (auto &row : data)
        {
            string med_name_lower = toLower(row[1]);

            if (med_name_lower.find(input_lower) != string::npos)
            {
                found = true;

                if (toLower(row[6]) == "no match")
                {
                    cout << "\nNo cheaper alternatives for: " << row[1] << endl;
                    continue;
                }

                cout << "\n=== Expensive Medicine ===\n";
                cout << "Name      : " << row[1] << "\n";
                cout << "Unit Size : " << row[2] << "\n";
                cout << "Price     : " << row[3] << "\n";
                cout << "Salts     : " << row[5] << "\n";

                vector<string> cheap_names = split(row[7], '|');
                vector<string> cheap_salts = split(row[8], '|');
                vector<string> cheap_prices = split(row[9], '|');
                vector<string> cheap_units = split(row[10], '|');

                int count = cheap_names.size();

                auto cmp = [](const CheapMedicine &a, const CheapMedicine &b)
                {
                    return stof(a.price) > stof(b.price);
                };

                priority_queue<CheapMedicine, vector<CheapMedicine>, decltype(cmp)> pq(cmp);

                for (int i = 0; i < count; ++i)
                {
                    string name = cheap_names[i];
                    string salt = cheap_salts[i];
                    string price = cheap_prices[i];
                    string unit = cheap_units[i];
                    try
                    {
                        stof(price);
                        pq.push({toLower(name), toLower(salt), price, unit});
                    }
                    catch (...)
                    {
                        continue;
                    }
                }

                if (pq.empty())
                {
                    cout << "\nNo valid cheaper alternatives found.\n";
                }
                else
                {
                    cout << "\n--- Cheaper Alternatives (Sorted by Price) ---\n";
                    while (!pq.empty())
                    {
                        CheapMedicine c = pq.top();
                        pq.pop();
                        cout << "Name      : " << c.name << "\n";
                        cout << "Salt      : " << c.salt << "\n";
                        cout << "Price     : " << c.price << "\n";
                        cout << "Unit Size : " << c.unit_size << "\n";
                        cout << "-----------------------------\n";
                    }
                }
            }
        }

        if (!found)
        {
            cout << "\nNo matching medicine found for input.\n";
        }
    }

    return 0;
}
